#!/usr/bin/python
#####################################
# Copyright (c) openBrain 2019
# Licensed under LGPL v2
#
# This macro will straighten an object vs. root origin based on a selected face or/and a selected edge (or 2 selected vertices)
# * If only a face is selected -> Center of mass of the face is set at origin, and normal to face at this same point is aligned with Z axis
# * If only an edge is selected (or 2 vertices) -> Object is rotated around Z axis (centered at the bounding box center) so that the virtual line between the 2 edge endpoints (or between the 2 vertices) is aligned with X axis
# * If both a face and an edge (or 2 vertices) are selected, both previous effects are applied (at the difference that the Z rotation in centered on the face center of mass)
#
# Selected items shall belong to the same object
#
# Main use of the macro is to re-align imported objects with the FreeCAD origin
#
# Version history :
# *0.5 : beta release
# *0.51 : change reference face alignment so it is considered a bottom face rather than a top one
# *0.6 : change way of reaching PartDesign Body, older has trouble with objects contained in a part
#####################################

__title__   = "Straighten an object by a face and/or an edge (or 2 vertices)"
__author__  = "openBrain"
__license__ = "LGPL v2"
__version__ = "0.6" # Ready for beta test
__date__    = "2019.03"

__dbg__ = False

def cslM(msg):
    FreeCAD.Console.PrintMessage(msg)
    FreeCAD.Console.PrintMessage('\n')

def cslW(msg):
    FreeCAD.Console.PrintWarning(msg)
    FreeCAD.Console.PrintWarning('\n')

def cslE(msg):
    FreeCAD.Console.PrintError(msg)
    FreeCAD.Console.PrintError('\n')

def cslD(msg):
    if __dbg__:
        FreeCAD.Console.PrintMessage("Debug : " + str(msg))
        FreeCAD.Console.PrintMessage('\n')

_0Vec_ = App.Vector(0, 0, 0)
_XVec_ = App.Vector(1, 0, 0)
_YVec_ = App.Vector(0, 1, 0)
_ZVec_ = App.Vector(0, 0, 1)

cslM("Starting Straighten Object macro")
cslD("Getting selected object")

if len(FreeCADGui.Selection.getSelection()) != 1: #if only one object selected
    cslE("No or too much object(s) selected, shall be one ... Exiting")
else:
    obj = FreeCADGui.Selection.getSelection()[0] #get it
    while str(obj)[1:11] == 'PartDesign': #tip used to find the Body if the selected object is a PartDesign feature !! More checks needed for other object types
        obj = obj.getParentGeoFeatureGroup()

    cslD("Object : " + obj.Label + " / " + obj.TypeId)
    cslD("Getting selected items")
    
    refFaceDef = False #true if a reference face is selected
    refPt1Def = False #true if one reference point is found selected
    refPt2Def = False #true if another reference point is found selected
    selError = False #true is incorrect selection made
    
    for selItem in FreeCADGui.Selection.getSelectionEx()[0].SubObjects: #going through selected items
        if isinstance(selItem, Part.Face): #if it's a face
            if not refFaceDef: #if reference face not yet defined
                refFace = selItem #define it
                refFaceDef = True #and remember
            else:
                selError = True #too much face selected
        elif isinstance(selItem, Part.Edge): #if it's an edge
            if not refPt1Def and not refPt2Def: #if reference points not yet defined
                refPt1 = selItem.Vertexes[0] #define 1st reference point as first edge point
                refPt1Def = True #and remember
                refPt2 = selItem.Vertexes[len(selItem.Vertexes)-1] #define 2nd reference point as last edge point
                refPt2Def = True #and remember
            else:
                selError = True #too much reference points selected
        elif isinstance(selItem, Part.Vertex): #if it's a vertex
            if not refPt1Def: #if 1st reference point not yet defined
                refPt1 = selItem #define it
                refPt1Def = True #and remember
            elif not refPt2Def: #if 2nd reference point not yet defined
                refPt2 = selItem #define it
                refPt2Def = True #and remember
            else:
                selError = True #too much reference points selected
        else:
            selError = True #incorrect type of item selected
    
    if selError or (bool(refPt1Def) != bool(refPt2Def)) or (not (refPt1Def or refPt2Def or refFaceDef)): #if selection error or only one reference point defined or no reference face/point defined
        cslE("Selection error : Select a face and an edge (or a face and two vertexes) of the same object ... Exiting")
    else:
        cslD("Starting Transformation")
        shiftVec = _0Vec_ #no shift move by defaut
        faceRot = App.Rotation(_ZVec_, _ZVec_) #no reference rotation by default
        lineRot = App.Rotation(_ZVec_, _ZVec_) #no reference line by default
        normVec = _ZVec_ #normal is the Z axis by default
        rotCenter = obj.Shape.BoundBox.Center #center of rotation at object bounding box center by default

        if refFaceDef: #if a reference face has been defined
            cslD("A reference face is available")
            faceCurv = refFace.curvatureAt(refFace.Surface.parameter(refFace.CenterOfMass)[0], refFace.Surface.parameter(refFace.CenterOfMass)[1]) #calculating face curvature at center of mass
            cslD("Curvature : " + str(faceCurv))
            if faceCurv != (0, 0): #if reference face is not flat at its center of mass
                cslW("Reference face is not flat at its center of mass, unexpected results may happen") #warn user about it
            rotCenter = refFace.CenterOfMass #changing center of rotation to center of mass of reference face
            shiftVec -= refFace.CenterOfMass #the reference face will be centered
            normVec = refFace.normalAt(refFace.Surface.parameter(refFace.CenterOfMass)[0], refFace.Surface.parameter(refFace.CenterOfMass)[1]) #getting normal vector at face center of mass
            faceRot = App.Rotation(normVec, -_ZVec_) #calculate needed rotation to align the reference face with Z axis
            obj.Placement = App.Placement(_0Vec_, faceRot, rotCenter).multiply(obj.Placement) #rotate object to align reference face normal with Z axis
            cslD("Object rotated to match reference face normal with Z axis")
            #lineVec = App.Vector(refPt2.X-refPt1.X, refPt2.Y-refPt1.Y, refPt2.Z-refPt1.Z)
        if refPt1Def: #if reference points have been defined
            cslD("Reference points are avalailable")
            lineVec = refPt2.Point - refPt1.Point #calculate vector (reference line) defined by reference points
            lineVecMod = faceRot.multVec(lineVec) #reference line has maybe been modified by previous object rotation
            lineNorm = lineVecMod.projectToPlane(_0Vec_, _ZVec_) #calculate line projection on XY plane
            cslD("Normality : " + str(lineNorm))
            if lineNorm == App.Vector(0, 0, 0): #if reference line is perpendicular to rotating plane
                cslW("Line reference is aligned with normal, line alignment will be ignored") #warn user about it
            else:
                lineRot = App.Rotation(lineVecMod.projectToPlane(_0Vec_, _ZVec_), _XVec_) #project the reference line vector to XY plane and calculate needed rotation to align with X axis
                obj.Placement = App.Placement(_0Vec_, lineRot, rotCenter).multiply(obj.Placement) #rotate object to align reference line with X axis
                cslD("Object rotated to match reference line with X axis")

        obj.Placement.move(shiftVec) #finally shift object if needed
        cslD("Object shift")
        cslM("Macro terminated correctly")
