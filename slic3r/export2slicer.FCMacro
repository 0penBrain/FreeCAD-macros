# -*- coding: utf-8 -*-
# Opens current visible objects in Slic3r. One can use different slicing software

__Title__ = "Open in Slic3r"
__Author__ = "Damian Łoziński"
__Version__ = "0.1"
__Date__ = "2019-03-06"
__Comment__ = "Exports current visible objects to amf files and opens them in Slic3r"
__Web__ = ""
__Wiki__ = "http://www.freecadweb.org/wiki/index.php?title=Open in Slic3r"
__Icon__ = "/usr/lib/freecad/Mod/plugins/icons/Slic3r.png"
__Help__ = "Run this macro to open visible objects in slicer software. You may need to change slicer path"
__Status__ = ""
__Requires__ = "freecad 0.17"
__Communication__ = "https://github.com/dlozinski"
__Files__ = "Slic3r.png"

import Mesh
import MeshPart
import os
import subprocess

# Slicing program executable. One can use different slicing software here and provide proper slicer executable location and custom flags
SLICER_CMD = ["/Applications/Slic3r.app/Contents/MacOS/Slic3r", "--gui"]

def main():
    doc = App.ActiveDocument
    if not doc:
        return "No active document"

    # Get all visible objests with shapes
    visible_shapes = (o for o in doc.Objects if o.ViewObject.isVisible() and hasattr(o, 'Shape'))

    if not visible_shapes:
        return "No visible shapes"

    # Ensure to not include both parent and child objects
    objects_to_export = set()
    for o in visible_shapes:
        if not set(o.InListRecursive).intersection(objects_to_export):
            objects_to_export.add(o)

    out_dir = os.path.dirname(doc.FileName)
    mesh_path = out_dir + "/meshes.amf" if out_dir else "meshes.amf"

    # Create temporary doc to store meshes
    tmp_doc = App.newDocument("meshes")
    try:
        meshes = []
        for o in objects_to_export:
            mesh = tmp_doc.addObject("Mesh::Feature", "Mesh")
            mesh.Mesh = MeshPart.meshFromShape(o.Shape, LinearDeflection=0.1, AngularDeflection=0.0872665, Relative=False)
            meshes.append(mesh)
        Mesh.export(meshes, mesh_path)
    finally:
        App.closeDocument("meshes")

    # Launch Slicer with meshes
    subprocess.Popen(SLICER_CMD + [mesh_path])


error = main()
if error:
    App.Console.PrintError("Error while opening in Slicer: " + error + "\n")
else:
    App.Console.PrintMessage("Objects opened in Slicer\n")
