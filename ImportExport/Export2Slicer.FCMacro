# -*- coding: utf-8 -*-
# Opens current visible objects in Slic3r. One can use different slicing software

__Title__ = "Export to Slicer"
__Author__ = "Damian Łoziński"
__Version__ = "0.1"
__Date__ = "2020-04-26"
__Comment__ = "Export selected objects to amf/stl files and open it in Slicer"
__Web__ = "https://forum.freecadweb.org/viewtopic.php?f=10&t=4686&sid=e69e70bc34c1987e215b5fc6fcb6b367&start=20"
__Wiki__ = ""
__Icon__ = "Export2Slicer.png"
__Help__ = "Run this macro to selected objects in slicer software. You may need to change slicer path"
__Status__ = ""
__Requires__ = "freecad 0.17+"
__Communication__ = "lozinski dot d at gmail dot com"
__Files__ = "Export2Slicer.png"

import os
import subprocess
import Mesh
import MeshPart

# Slicing program executable. One can use different slicing software here and provide proper slicer executable location and custom flags
g_slicer_cmd = ["/Applications/Original Prusa Drivers/PrusaSlicer.app/Contents/MacOS/PrusaSlicer"]

# Change to `amf` for multiple parts export
g_output_format = "stl"

# Angular deflection in radians. Lower value = better quality of curved shapes and bigger file size
g_angular_deflection = 0.07


def get_filename(doc_filename):
	if doc_filename:
		dirname = os.path.dirname(doc_filename)
		filename = os.path.basename(doc_filename).partition('.')[0] + '.' + g_output_format
		file_path = os.path.join(dirname, filename)
	else:
		file_path = "meshes-export." + OUTPUT_FORMAT
	return file_path

def main():
    doc = App.ActiveDocument
    if not doc:
        raise Exception("No active document")

    objects_to_export = Gui.Selection.getSelection()
    mesh_path = get_filename(doc.FileName)

    try:
        # Create temporary doc to store meshes so that we don't affect current doc history
        tmp_doc = App.newDocument("meshes")
        meshes = [m for m in doc.Objects if m.ViewObject.isVisible() and m.TypeId == 'Mesh::Feature']
        for o in objects_to_export:
            mesh = tmp_doc.addObject("Mesh::Feature", doc.Label)
            mesh.Mesh = MeshPart.meshFromShape(o.Shape, LinearDeflection=0.1, AngularDeflection=g_angular_deflection, Relative=False)
            meshes.append(mesh)

        if meshes:
            Mesh.export(meshes, mesh_path)
        else:
            raise Exception("No visible objects to export")
    finally:
        App.closeDocument("meshes")

    # Launch Slicer with meshes
    subprocess.Popen(g_slicer_cmd + [mesh_path])
    App.Console.PrintMessage("Objects exported to Slicer: {}\n".format(mesh_path))

try:
    main()
except Exception as e:
    App.Console.PrintMessage("Exporting to slicer failed: {}\n".format(e))
